services:
   
  reverse_proxy:
    build:      
      context: ./nginx
      dockerfile: Dockerfile
    restart: unless-stopped  
    depends_on:
      - frontend
      - backend
    ports:
      - "${REVERSE_PROXY_PORT}:80"
    networks:
      - proxynet
      
  frontend:
    build:      
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${FRONTEND_HOST_PORT}:80"
    depends_on:
      - backend
    networks:
      - frontend
      - proxynet
      
  backend:
    build:      
      context: ./backend
      dockerfile: ./backend/Dockerfile
    restart: unless-stopped
    environment:
      - DATABASE_SERVER=${DATABASE_SERVER}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASS=${DATABASE_PASS}
      - DATABASE_PORT=${DATABASE_HOST_PORT}
      - ROOM_MONITOR_INTERVAL=${ROOM_MONITOR_INTERVAL}      
      - ROOM_TIME_OUT=${ROOM_TIME_OUT}
      - X509_CERTIFICATE_2_PASSWORD=${X509_CERTIFICATE_2_PASSWORD}
    ports:
      - "${BACKEND_HOST_PORT}:8080"
    volumes:
      - ./certificates:/certificates:ro
      - protection_keys:/app/keys
    depends_on:
      - database
    networks:
      - frontend
      - backnet
      - proxynet
      
  database:
    build:      
      context: ./database
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASS}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backnet

  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_HOST_PORT}:8080"
    networks:
      - backnet

networks:
  proxynet:
    driver: bridge
  frontend:
    driver: bridge
  backnet:
    driver: bridge
  
volumes:
  postgres_data:
  protection_keys: